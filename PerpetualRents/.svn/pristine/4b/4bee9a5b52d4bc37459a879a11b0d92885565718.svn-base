package com.pcs.perpetualRents.manager.impl;

import javax.swing.SwingUtilities;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.thymeleaf.spring3.SpringTemplateEngine;

import com.pcs.perpetualRents.business.bean.Admin;
import com.pcs.perpetualRents.business.bean.Authorities;
import com.pcs.perpetualRents.business.bean.Charity;
import com.pcs.perpetualRents.business.bean.Contractor;
import com.pcs.perpetualRents.business.bean.EditPassword;
import com.pcs.perpetualRents.business.bean.LandLord;
import com.pcs.perpetualRents.business.bean.PropertyDeveloper;
import com.pcs.perpetualRents.business.bean.UserLogin;
import com.pcs.perpetualRents.common.bean.ApplicationSettings;
import com.pcs.perpetualRents.dao.CharityDAO;
import com.pcs.perpetualRents.dao.ContractorDAO;
import com.pcs.perpetualRents.dao.FileDAO;
import com.pcs.perpetualRents.dao.LandLordDAO;
import com.pcs.perpetualRents.dao.PropertyDeveloperDAO;
import com.pcs.perpetualRents.dao.UserAdminDAO;
import com.pcs.perpetualRents.dao.UserLoginDAO;
import com.pcs.perpetualRents.enm.MailEventType;
import com.pcs.perpetualRents.enm.UserType;
import com.pcs.perpetualRents.manager.CommonManager;
import com.pcs.perpetualRents.manager.ContractorManager;
import com.pcs.perpetualRents.manager.FileManager;
import com.pcs.perpetualRents.manager.MailEventManager;
import com.pcs.perpetualRents.manager.PMCManager;
import com.pcs.perpetualRents.manager.PropertyManager;
import com.pcs.perpetualRents.manager.UserAdminManager;
import com.pcs.perpetualRents.manager.UserLoginManager;
import com.pcs.perpetualRents.util.mail.ContractorMailUtility;
import com.pcs.perpetualRents.util.mail.LandlordMailUtility;
import com.pcs.perpetualRents.util.mail.PMCMailUtility;
import com.pcs.perpetualRents.util.mail.SubAdminMailUtility;
import com.pcs.perpetualRents.util.mail.SubPmcMailUtility;
import com.pcs.perpetualRents.util.mail.SuperAdminMailUtility;

@Service
@Transactional
public class UserLoginManagerImpl implements UserLoginManager {
	
	@Autowired
	private PropertyDeveloperDAO propertyDeveloperDAO;
	@Autowired
	private UserLoginDAO userLoginDAO;
	@Autowired
	private LandLordDAO landLordDAO;
	@Autowired
	private ContractorDAO contractorDAO;
	@Autowired
	private ApplicationSettings applicationSettings;
	@Autowired
	private JavaMailSender mailSender;
	@Autowired
	private SpringTemplateEngine templateEngine;
	@Autowired
	private PropertyManager propertyManager;
	@Autowired
	private MailEventManager eventManager;
	@Autowired
	private CommonManager commonManager;
	@Autowired
	private UserAdminDAO adminDAO;
	@Autowired
	private PMCManager pmcManager;
	@Autowired
	private ContractorManager contractorManager;
	
	@Autowired
	private UserAdminManager userAdminManager;
	
	@Override
	public UserLogin findLoginUserByName(String username) {
		try{
			return userLoginDAO.findLoginUserByUserName(username);
		}catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	public UserLoginDAO getUserLoginDAO() {
		return userLoginDAO;
	}

	public void setUserLoginDAO(UserLoginDAO userLoginDAO) {
		this.userLoginDAO = userLoginDAO;
	}

	@Override
	public boolean updatePassword(EditPassword passwordObj) {
		try{
			Boolean execStatus = false;
			UserLogin loginObj = userLoginDAO.findLoginUserById(passwordObj.getId());
			if(loginObj != null){
				 execStatus = userLoginDAO.updatePassowrd(passwordObj);
				if(execStatus){
					if(passwordObj.getUsername() != null && passwordObj.getUsername().length() > 0){
						Authorities authorityObj = new Authorities();
							authorityObj.setUserName(loginObj.getUsername());
							userLoginDAO.updateAuthority(authorityObj, passwordObj.getUsername());
					 }
					
					if(loginObj.getUserTypeId() == UserType.LANDLORD.id()){
						LandLord landlordObj = landLordDAO.loadLandLordByLoginId(loginObj.getId());
						if(landlordObj != null)
							SwingUtilities.invokeLater(new LandlordMailUtility(landlordObj, userAdminManager, applicationSettings, mailSender, MailEventType.PASSWORD_CHANGE, eventManager, templateEngine, commonManager, null));
					}else if(loginObj.getUserTypeId() == UserType.CONTRACTOR.id()){
						Contractor contractorObj = contractorDAO.findContractorByLoginId(loginObj.getId());
						if(contractorObj != null)
							SwingUtilities.invokeLater(new ContractorMailUtility(contractorObj, contractorManager, applicationSettings, mailSender, MailEventType.PASSWORD_CHANGE, eventManager, templateEngine, commonManager));
					}else if(loginObj.getUserTypeId() == UserType.SUPER_ADMIN.id()){
							SwingUtilities.invokeLater(new SuperAdminMailUtility(applicationSettings, mailSender, MailEventType.PASSWORD_CHANGE, eventManager, templateEngine, commonManager));
					}else if(loginObj.getUserTypeId() == UserType.ADMIN.id()){
						Admin adminObj = adminDAO.loadAdminByLoginObj(loginObj);
						if(adminObj != null){
							SwingUtilities.invokeLater(new SubAdminMailUtility(adminObj, applicationSettings, mailSender, MailEventType.PASSWORD_CHANGE, eventManager, templateEngine, commonManager));
						}
					}else if(loginObj.getUserTypeId() == UserType.SUPER_PMC.id()){
						Charity charityObj = pmcManager.loadCharityByUserLogin(loginObj);
						if(charityObj != null){
							SwingUtilities.invokeLater(new PMCMailUtility(charityObj, applicationSettings, mailSender, MailEventType.PASSWORD_CHANGE, eventManager, templateEngine, commonManager, loginObj));
						}
					}else if(loginObj.getUserTypeId() == UserType.PMC.id()){
						Charity charityObj = pmcManager.loadCharityByUserLogin(loginObj);
						if(charityObj != null){
							SwingUtilities.invokeLater(new SubPmcMailUtility(charityObj, pmcManager, applicationSettings, mailSender, MailEventType.PASSWORD_CHANGE, eventManager, templateEngine, commonManager, loginObj));
						}
					}
					else if (loginObj.getUserTypeId() == UserType.PROPERTY_DEVELOPER.id()){
						PropertyDeveloper propertyDeveloperObj  = propertyDeveloperDAO.loadPropertyDeveloperByLoginId(loginObj.getId());
					//	if(propertyDeveloperObj != null)
					//		SwingUtilities.invokeLater(new LandlordMailUtility(landlordObj, userAdminManager, applicationSettings, mailSender, MailEventType.PASSWORD_CHANGE, eventManager, templateEngine, commonManager, null));
					}
				}
			}
			
			return execStatus;
		}catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public boolean validateUser(String userName) {
		boolean status = userLoginDAO.validateUser(userName);
		return status;
	}
	
}
