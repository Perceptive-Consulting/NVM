package com.pcs.perpetualRents.manager.impl;

import java.util.ArrayList;
import java.util.List;

import javax.swing.SwingUtilities;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.thymeleaf.spring3.SpringTemplateEngine;

import com.pcs.perpetualRents.business.bean.Address;
import com.pcs.perpetualRents.business.bean.Admin;
import com.pcs.perpetualRents.business.bean.AdminUploadDocuments;
import com.pcs.perpetualRents.business.bean.Authorities;
import com.pcs.perpetualRents.business.bean.City;
import com.pcs.perpetualRents.business.bean.File;
import com.pcs.perpetualRents.business.bean.PDDocuments;
import com.pcs.perpetualRents.business.bean.PDProperty;
import com.pcs.perpetualRents.business.bean.PropertyDeveloper;
import com.pcs.perpetualRents.business.bean.PropertyDocumentDownloadStatus;
import com.pcs.perpetualRents.business.bean.UserLogin;
import com.pcs.perpetualRents.common.bean.ApplicationSettings;
import com.pcs.perpetualRents.dao.AddressDAO;
import com.pcs.perpetualRents.dao.AdminDocumentDAO;
import com.pcs.perpetualRents.dao.CityDAO;
import com.pcs.perpetualRents.dao.IdentityGeneratorDAO;
import com.pcs.perpetualRents.dao.PropertyDeveloperDAO;
import com.pcs.perpetualRents.dao.PropertyDocumentDownloadStatusDAO;
import com.pcs.perpetualRents.dao.UserLoginDAO;
import com.pcs.perpetualRents.enm.AdminDocuments;
import com.pcs.perpetualRents.enm.IdentityGeneratorObjective;
import com.pcs.perpetualRents.enm.MailEventType;
import com.pcs.perpetualRents.enm.ObjectType;
import com.pcs.perpetualRents.enm.PDDocumentsType;
import com.pcs.perpetualRents.enm.Status;
import com.pcs.perpetualRents.enm.UserType;
import com.pcs.perpetualRents.manager.CommonManager;
import com.pcs.perpetualRents.manager.FileManager;
import com.pcs.perpetualRents.manager.MailEventManager;
import com.pcs.perpetualRents.manager.PropertyDeveloperManager;
import com.pcs.perpetualRents.manager.UserAdminManager;
import com.pcs.perpetualRents.manager.UserLoginManager;
import com.pcs.perpetualRents.util.PDPropertyPdfCreater;
import com.pcs.perpetualRents.util.mail.PropertyDeveloperMailUtility;

@Service
@Transactional
public class PropertyDeveloperManagerImpl implements PropertyDeveloperManager{

	
	@Autowired
	private PropertyDeveloperDAO propertyDeveloperDAO;
	@Autowired
	private AddressDAO addressDAO;
	/*@Autowired
	private AssignDAO assignDAO;
	@Autowired
	private DevelopmentSettings developmentSettings;
	@Autowired
	private FileDAO fileDAO;
	@Autowired
	private PropertyManager propertyManager;
	@Autowired
	private UserAdminDAO userAdminDAO;
	@Autowired
	private DocumentsDAO documentsDAO;
	@Autowired
	private CountyDAO countyDAO;*/
	@Autowired
	private UserLoginDAO userLoginDAO;
	@Autowired
	private IdentityGeneratorDAO gereratorDAO;
	@Autowired
	private CityDAO cityDAO;
	@Autowired
	private ApplicationSettings applicationSettings;
	@Autowired
	private JavaMailSender mailSender;
	@Autowired
	private SpringTemplateEngine templateEngine;
	@Autowired
	private MailEventManager eventManager;
	@Autowired
	private CommonManager commonManager;
	@Autowired
	private PropertyDocumentDownloadStatusDAO propertyDocumentDownloadStatusDAO;
	@Autowired
	private AdminDocumentDAO adminDocumentDAO;
	@Autowired
	private UserAdminManager userAdminManager;
	@Autowired
	private FileManager fileManager;
	@Autowired
	private UserLoginManager loginManager;
	
	@Autowired(required=true)
	private PDPropertyPdfCreater pdPropertyPdfCreaterObj;
	
	@Override
	public boolean createPropertyDeveloper(final PropertyDeveloper obj, Long userID) {
		try {

			if(obj == null){
				System.out.println("Object is Null");
				return false;
			}
			Address addressObj = obj.getAddressObj();
			UserLogin loginObj = obj.getLoginObj();
			
			if(addressObj == null){
				obj.setErrorMessage("Address Detail is not complete");
				return false;
			}
			if(loginObj == null){
				obj.setErrorMessage("Login Detail is not complete");
				return false;
			}
			
			loginObj.setUserTypeId(UserType.PROPERTY_DEVELOPER.id());
			Long userLoginId = userLoginDAO.createLoginUser(loginObj, userID);
							   userLoginDAO.createAuthority(new Authorities(loginObj.getUsername(), "ALL"));
			if(userLoginId == null){
				obj.setErrorMessage((loginObj.getErrorMessage() == null ? "" : loginObj.getErrorMessage()));
				return false;
			}
			obj.setUserLoginId(userLoginId);
			System.out.println("UNIQUE Reference ----- :: "+gereratorDAO.getUniqueReference(IdentityGeneratorObjective.PROPERTY_DEVELOPER_IDENTITY.value()));
			
			obj.setUniqueReference(gereratorDAO.getUniqueReference(IdentityGeneratorObjective.PROPERTY_DEVELOPER_IDENTITY.value()));
			System.out.println(obj.toString());
			Long propertyDeveloperID = propertyDeveloperDAO.createPropertyDeveloper(obj, null);
			if(propertyDeveloperID == null){
				obj.setErrorMessage("Property Developer not created.");
				return false;
			}
			
			addressObj.setCountryId(1l);
			addressObj.setObjectType(ObjectType.PROPERTY_DEVELOPER.id());
			addressObj.setObjectId(propertyDeveloperID);
			
			String _cityIdStr = addressObj.getCity();
			if(_cityIdStr != null){
				City tCityObj = cityDAO.loadCityById(Long.valueOf(_cityIdStr));
				if(tCityObj != null){
					addressObj.setCity(tCityObj.getCity());
					Long addressId = addressDAO.createAddress(addressObj, userID);
					if(addressId != null){
						PropertyDeveloper tPropDeveloperObj = loadPropDeveloperById(propertyDeveloperID);
						System.out.println("tPropDeveloperObj ----:: "+tPropDeveloperObj);
						SwingUtilities.invokeLater(new  PropertyDeveloperMailUtility(tPropDeveloperObj, applicationSettings, mailSender, MailEventType.REGISTER, eventManager, templateEngine, commonManager, loginObj));
						return true;
					}
				}
			}
			return true;
		 } catch (DuplicateKeyException e) {
			obj.setErrorMessage("UserName already exist, Please try with different username");
			return false;
		}
	}
		
		@Override
		public PropertyDeveloper loadPropDeveloperById(Long id) {
			PropertyDeveloper propDeveloperObj = propertyDeveloperDAO.loadPropertyDeveloperById(id);
			if(propDeveloperObj != null){
				List<Address> addressList = addressDAO.loadAddressById(ObjectType.PROPERTY_DEVELOPER.id(), propDeveloperObj.getId());
				if(addressList != null && !addressList.isEmpty()){
					propDeveloperObj.setAddressObj(addressList.get(0));
				}
				return propDeveloperObj;
			}
			return null;
		}
		

		@Override
		public PropertyDeveloper loadPropertyDeveloperByUserLogin(UserLogin userLoginObj) {
			if(userLoginObj == null)
				return null;
			
			try{
				PropertyDeveloper tPropertyDeveloperObj = propertyDeveloperDAO.loadPropertyDeveloperObjByLoginId(userLoginObj.getId());   // ---null
				if(tPropertyDeveloperObj != null){
					List<Address> addressList = addressDAO.loadAddressById(ObjectType.PROPERTY_DEVELOPER.id(), tPropertyDeveloperObj.getId());
					if(addressList != null && !addressList.isEmpty())
						tPropertyDeveloperObj.setAddressObj(addressList.get(0));
					
					return tPropertyDeveloperObj;
				}
				return null;
			}catch (Exception e) {
				e.printStackTrace();
				return null;
			}
		}

		@Override
		public boolean updatePropertyDeveloper(PropertyDeveloper tPropertyDeveloperObj, Long userId) {
			try{
				if(tPropertyDeveloperObj == null){
					return false;
				}
				
				Address tAddressObj = tPropertyDeveloperObj.getAddressObj();
				
				if(tAddressObj == null){
					tPropertyDeveloperObj.setErrorMessage("Address is not complete.");
					return false;
				}
				
				tAddressObj.setObjectType(ObjectType.PROPERTY_DEVELOPER.id());
				String cityIdStr = tAddressObj.getCity();
				UserLogin loginObj = userLoginDAO.findLoginUserById(userId);
				if(cityIdStr != null && loginObj != null){
					City cityObj = cityDAO.loadCityById(Long.valueOf(cityIdStr));
					if(cityObj != null){
						tAddressObj.setObjectId(tPropertyDeveloperObj.getId());
						tAddressObj.setCity(cityObj.getCity());
						addressDAO.updateAddress(tAddressObj, userId);
						propertyDeveloperDAO.updatePropertyDeveloper(tPropertyDeveloperObj);
						tPropertyDeveloperObj = loadPropDeveloperById(tPropertyDeveloperObj.getId());
					}
				}
				
				return true;
				
			}catch (Exception e) {
				e.printStackTrace();
				tPropertyDeveloperObj.setErrorMessage(e.getMessage());
				return false;
			}
		}
		
		@Override
		public Long createPropertyDocumentDownloadStatus(PropertyDocumentDownloadStatus statusObj, final Long createdUserId){
			return propertyDocumentDownloadStatusDAO.createPropertyDocumentDownloadStatus(statusObj, createdUserId);
		}
		
		@Override
		public PropertyDocumentDownloadStatus loadDocumentStatusById(Long id){
			return propertyDocumentDownloadStatusDAO.loadDocumentStatusById(id);
		}
		
		@Override
		public PropertyDocumentDownloadStatus loadDocumentStatusByPD(Long pdId){
			return propertyDocumentDownloadStatusDAO.loadDocumentStatusByObjectType(ObjectType.PROPERTY_DEVELOPER.id(), pdId);
		}
		
		@Override
		public boolean updateDocStatus(String tableName, String[] fields, String[] values, String[] whereCondition, String[] whereValues){
			return propertyDocumentDownloadStatusDAO.updateDocStatus(tableName, fields, values, whereCondition, whereValues);
		}

		@Override
		public boolean updateProperty(PDProperty pdPropertyObj, Long id) {
			// TODO Auto-generated method stub
			return false;
		}

		@Override
		public boolean saveProperty(PDProperty pdPropertyObj, Long id) {
			if (pdPropertyObj == null)
				return false;
			
			
			Address addressObj = pdPropertyObj.getAddressObj();

			if (addressObj == null)
				return false;
			
			pdPropertyObj.setStatusId((short) Status.UNAPPROVED.id());
			
			pdPropertyObj.setUniqueReference(gereratorDAO.getUniqueReference("Property"));
			Long propertyId = propertyDeveloperDAO.savePropertyDetails(pdPropertyObj, id);
			if (propertyId == null)
				return false;
			

			pdPropertyObj.setId(propertyId);
			String _cityIdStr = addressObj.getCity();
			if (_cityIdStr != null) {
				City cityObj = cityDAO.loadCityById(Long.valueOf(_cityIdStr));
				if (cityObj != null) {
					addressObj.setCity(cityObj.getCity());
					addressObj.setObjectId(propertyId);
					addressObj.setObjectType(ObjectType.PD_PROPERTY.id());
					addressDAO.createAddress(addressObj, id);
				}
			}
			return true;
		}
		
		@Override
		public boolean saveDocuments(List<PDDocuments> documents , Long createdUserId, PDProperty pdPropertyObj, String editCheck){
			
			if(documents != null && !documents.isEmpty()){
				for (PDDocuments pdDocuments : documents) {
					File fileObj = pdDocuments.getFileObj();
					if(fileObj != null){
						
						Long fileId = fileManager.saveFile(fileObj, createdUserId);
						if(fileId != null){
							pdDocuments.setFileId(fileId);
							propertyDeveloperDAO.savePropertyDocuments(pdDocuments, createdUserId);
							//''''''''''''''''''
							if(editCheck != null && editCheck.equalsIgnoreCase("1")){
								propertyDeveloperDAO.updateDocumentStatusInPDProperty(pdPropertyObj, editCheck);
							} else if (editCheck != null && editCheck.equalsIgnoreCase("2")) {
								propertyDeveloperDAO.updateDocumentStatusInPDProperty(pdPropertyObj, editCheck);
							}
							
						}
					}
					
				}
				return true;
			}
			
			return false;
		}
		
		// SAME FUNCNALITY AS OF ABOVE METHOD
		@Override
		public boolean saveDocumentsByAdmin(List<PDDocuments> documents , Long createdUserId, PDProperty pdPropertyObj, String editCheck, String description ){
			
			if(documents != null && !documents.isEmpty()){
				for (PDDocuments pdDocuments : documents) {
					File fileObj = pdDocuments.getFileObj();
					if(fileObj != null){

						Long fileId = fileManager.saveFile(fileObj, createdUserId);
						if(fileId != null){
							pdDocuments.setFileId(fileId);
							pdDocuments.setDescription(description);
							propertyDeveloperDAO.savePropertyDocuments(pdDocuments, createdUserId);
							if(editCheck != null && editCheck.equalsIgnoreCase("1")){
								propertyDeveloperDAO.updateForAdminUploadedDocumentStatus(pdPropertyObj, editCheck);
							} else if (editCheck != null && editCheck.equalsIgnoreCase("2")) {
								propertyDeveloperDAO.updateForAdminUploadedDocumentStatus(pdPropertyObj, editCheck);
							}
						}
					}
				}
				return true;
			}
			
			return false;
		}
		
		@Override
		public PDProperty loadPDPropertyById(Long id){
			try {
				PDProperty pdPropertyObj = propertyDeveloperDAO.loadPDPropertyById(id);
				List<Address> addressList = addressDAO.loadAddressById(ObjectType.PD_PROPERTY.id(), id);
				if (addressList != null && !addressList.isEmpty())
					if (pdPropertyObj != null)
						pdPropertyObj.setAddressObj(addressList.get(0));
				
				return pdPropertyObj;
			} catch (Exception e) {
				e.printStackTrace();
				return null;
			}
		}
		
		
		
		@Override
		public void loadPropertyDocuments(Long propertyDeveloper,  PDProperty pdPropertyObj, Long userId ){
			List<PDDocuments> drawingsAttached = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.DRAWINGS.id(), userId);
			List<PDDocuments> specificationAttached = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.SPECIFICATION.id(), userId);
			List<PDDocuments> landRegistryAttached = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.LAND_REGISTRY.id(), userId);
			List<PDDocuments> tenderDocumentsAttached = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.TENDER_DOCUMENTS.id(), userId);
			List<PDDocuments> constructionScheduleAttached = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.CONSTRUCTION_SCHEDULE.id(), userId);
			
			List<PDDocuments> additionalDocument1 = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.ADDITIONAL_DOCUMENTS_1.id(), userId);
			
			List<PDDocuments> additionalDocument2 = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.ADDITIONAL_DOCUMENTS_2.id(), userId);
			List<PDDocuments> additionalDocument3 = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.ADDITIONAL_DOCUMENTS_3.id(), userId);
			List<PDDocuments> additionalDocument4 = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.ADDITIONAL_DOCUMENTS_4.id(), userId);
			List<PDDocuments> additionalDocument5 = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.ADDITIONAL_DOCUMENTS_5.id(), userId);
			List<PDDocuments> images = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.IMAGES.id(), userId);
			List<PDDocuments> adminUploadedDoc = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloper, pdPropertyObj.getId(), PDDocumentsType.ADMIN_UPLOADED_DOCS.id(), userId);
			
			if(drawingsAttached != null)
				pdPropertyObj.setDrawings(drawingsAttached);
			
			if(specificationAttached != null)
				pdPropertyObj.setSpecifications(specificationAttached);
			
			if(landRegistryAttached != null)
				pdPropertyObj.setLandRegistery(landRegistryAttached);
			
			if(tenderDocumentsAttached != null)
				pdPropertyObj.setTenderDocuments(tenderDocumentsAttached);
			
			if(constructionScheduleAttached != null)
				pdPropertyObj.setConstructionSchedule(constructionScheduleAttached);
			
			if(additionalDocument1 != null)
				pdPropertyObj.setAdditionalDocuments1(additionalDocument1);
			
			if(additionalDocument2 != null)
				pdPropertyObj.setAdditionalDocuments2(additionalDocument2);
			
			if(additionalDocument3 != null)
				pdPropertyObj.setAdditionalDocuments3(additionalDocument3);
			
			if(additionalDocument4 != null)
				pdPropertyObj.setAdditionalDocuments4(additionalDocument4);
			
			if(additionalDocument5 != null)
				pdPropertyObj.setAdditionalDocuments5(additionalDocument5);
			
			if(images != null)
				pdPropertyObj.setImages(images);
			
			if(adminUploadedDoc != null)
				pdPropertyObj.setAdminUploadedDoc(adminUploadedDoc);
			
		}
		
		@Override
		public void removeDocuments(Long documentId){
			PDDocuments docObj = propertyDeveloperDAO.loadPDPropertyDocumentsById(documentId);
			if(docObj != null){
				File fileObj = docObj.getFileObj();
				if(fileObj != null){
					propertyDeveloperDAO.removeDocument(documentId);
					fileManager.deleteFileById(fileObj.getId());
				}
				
			}
		}

		@Override
		public List<PDProperty> loadPropertyByPropertyDeveloper(PropertyDeveloper propertyDeveloperObj) {
			List<PDProperty> propList = propertyDeveloperDAO.loadPropertyByPropertyDeveloper(propertyDeveloperObj);
			if (propList != null) {
				for (PDProperty _propObj : propList) {
					List<Address> addressList = addressDAO.loadAddressById(ObjectType.PD_PROPERTY.id(), _propObj.getId());
					if (addressList != null && !addressList.isEmpty()) {
						_propObj.setAddressObj(addressList.get(0));
					}
				}
				return propList;
			}

			return null;
		}

		@Override
		public boolean updatePropertyDetils(PDProperty tPDPropertyObj, Long userId) {
			try{
				if(tPDPropertyObj == null){
					return false;
				}
				
				Address addressObj = tPDPropertyObj.getAddressObj();
				
				if(addressObj == null){
				//	tPDPropertyObj.setErrorMessage("Address is not complete.");
					return false;
				}
				addressObj.setObjectType(ObjectType.PROPERTY_DEVELOPER.id());
				
				//String cityIdStr = addressObj.getCity();
				//UserLogin loginObj = userLoginDAO.findLoginUserById(userId);
						addressObj.setObjectId(tPDPropertyObj.getId());
						addressDAO.updateAddress(addressObj,userId);
						propertyDeveloperDAO.updatePDProperty(tPDPropertyObj);    
			//			tPDPropertyObj = loadPropDeveloperById(tPDPropertyObj.getId());
					//	Thread thread = new Thread(new  LandlordMailUtility(obj, userAdminManager, applicationSettings, mailSender, MailEventType.PROFILE_EDIT, eventManager, templateEngine, commonManager, loginObj));
					//	thread.start();
					//	thread.setContextClassLoader(getClass().getClassLoader());
					
				return true;
				
			}catch (Exception e) {
				e.printStackTrace();
				return false;
			}
		}

		@Override
		public List<PDProperty> loadAll(Integer start, Integer limit, UserLogin loginObj) {
			List<PDProperty> propList = null;
			if(loginObj != null){
				if(loginObj.getUserTypeId() == UserType.SUPER_ADMIN.id()){
					 propList = propertyDeveloperDAO.loadAllProperty(start, limit);
					if (propList != null) {
						for (PDProperty _propObj : propList) {
							List<Address> addressList = addressDAO.loadAddressById(ObjectType.PD_PROPERTY.id(), _propObj.getId());
							if (addressList != null && !addressList.isEmpty()) {
								_propObj.setAddressObj(addressList.get(0));
							}
						}
						return propList;
					}
				}else if(loginObj.getUserTypeId() == UserType.ADMIN.id()){
					Admin adminObj = userAdminManager.loadUserByLoginObj(loginObj);
					if(adminObj != null){
						List<City> tCityList = cityDAO.loadCityByObjectId(ObjectType.ADMIN.id(), adminObj.getId());
						
						if(tCityList != null && !tCityList.isEmpty()){
							propList = new ArrayList<PDProperty>();
							for (City city : tCityList) {
								List<Address> addressList = addressDAO.loadAddressByCity(city.getCity(), ObjectType.PD_PROPERTY.id());
								if(addressList != null && !addressList.isEmpty()){
									for (Address addressObj : addressList) {
										PDProperty propertyObj = propertyDeveloperDAO.loadPDPropertyById(addressObj.getObjectId());
										if(propertyObj != null){
											propList.add(propertyObj);
											List<Address> tAddressList = addressDAO.loadAddressById(ObjectType.PD_PROPERTY.id(), propertyObj.getId());
											if (tAddressList != null && !tAddressList.isEmpty()) {
												propertyObj.setAddressObj(tAddressList.get(0));
											}
										}
									}
								}
							}
							if(propList != null && !propList.isEmpty()){
								return propList;
							}
						}
					}
				}
			}
			return null;
		}
		
		@Override
		public PropertyDeveloper loadPropertyDeveloperByPropertyId(Long pdId){
			if(pdId != null){
				PDProperty pdPropObj = loadPDPropertyById(pdId);
				
				if(pdPropObj != null){
					if(pdPropObj.getCreatedBy() != null ){
						UserLogin tempObj = loginManager.findLoginUserByName(pdPropObj.getCreatedBy());
						if(tempObj != null){
							return loadPropertyDeveloperByUserLogin(tempObj);
						}
					}
						
				}
					
			}
			return null;
		}

		@Override
		public void disApproveProperty(PDProperty propertyObj, Long userId) {
			propertyDeveloperDAO.disApproveProperty(propertyObj, userId);
			}

		@Override
		public void approveProperty(PDProperty propertyObj, Long userId) {
			propertyDeveloperDAO.approveProperty(propertyObj, userId);
			}
		
		@Override
		public boolean savePropertyDetilsSecond(PDProperty tPDPropertyObj, Long userId) {
			try{
				if(tPDPropertyObj == null){
					return false;
				}
				System.out.println(" PDProperty  --- " +tPDPropertyObj);
				//UserLogin loginObj = userLoginDAO.findLoginUserById(userId);
				propertyDeveloperDAO.savePDPropertySecond(tPDPropertyObj);
					
				return true;
				
			}catch (Exception e) {
				e.printStackTrace();
				return false;
			}
		}
		
		@Override
		public File loadPDPropertyPdfByProposedPropertyId(final Long pdPropertyId) {
			try{
				
				if(pdPropertyId == null)
					return null;
				PDProperty pdPropertyObj = loadPDPropertyById(pdPropertyId);
				
				if(pdPropertyObj!= null){
					byte[] pdfByteArr =  pdPropertyPdfCreaterObj.createPDPropertyPdf(pdPropertyObj);
					File fileObj = null;
					if(pdfByteArr != null && pdfByteArr.length != 0){
						fileObj = new File();
						fileObj.setFileData(pdfByteArr);
						fileObj.setSize(pdfByteArr.length);
						Address addressObj = pdPropertyObj.getAddressObj();
						if(addressObj != null)
							fileObj.setFileName(pdPropertyObj.getUniqueReference()+"-"+addressObj.getPostCode());
						
						return fileObj;
					}
				}
					
				
			}catch(Exception e){
				e.printStackTrace();
			}
			return null;
		}
		
		public boolean checkAdminUploadDocument(Long propertyId){
			PropertyDeveloper propertyDeveloperObj = loadPropertyDeveloperByPropertyId(propertyId);
			PDProperty pdPropertyObj =  loadPDPropertyById(propertyId);
			List<PDDocuments> adminUploadedDoc = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloperObj.getId(), pdPropertyObj.getId(), PDDocumentsType.ADMIN_UPLOADED_DOCS.id(), null);
		
			return (adminUploadedDoc == null || adminUploadedDoc.size() == 0) ?  false :  true;
		}
		
		@SuppressWarnings("null")
		public List<PDDocuments> loadAdminUploadDocument(Long propertyId){
			PropertyDeveloper propertyDeveloperObj = loadPropertyDeveloperByPropertyId(propertyId);
			PDProperty pdPropertyObj =  loadPDPropertyById(propertyId);
			List<PDDocuments> adminUploadedDoc = propertyDeveloperDAO.loadPDPropertyDocuments(propertyDeveloperObj.getId(), pdPropertyObj.getId(), PDDocumentsType.ADMIN_UPLOADED_DOCS.id(), null);

			if(adminUploadedDoc != null || adminUploadedDoc.size() != 0){
				return adminUploadedDoc;
			}else
				return null;			
		}

		@Override
		public PDDocuments loadPDDocuments(Long documentId) {
			return propertyDeveloperDAO.loadPDDocuments(documentId);
		}

		@Override
		public boolean changePDDocumentStatus(Long documentId) {
			propertyDeveloperDAO.updatePDPropertyStatus(documentId);
			return false;
		}

		@Override
		public File loadNonDisclosureAgreement() {
			AdminUploadDocuments docObj = adminDocumentDAO.loadByDocumentId(AdminDocuments.PROPERTY_DEVELOPER_DOCUMENT_1.id());
			if(docObj != null){
				File fileObj = fileManager.loadFileById(docObj.getFileId());
				return fileObj;
			}
			return null;
		}

		@Override
		public File loadPreConstructionAgreement() {
			AdminUploadDocuments docObj = adminDocumentDAO.loadByDocumentId(AdminDocuments.PROPERTY_DEVELOPER_DOCUMENT_2.id());
			if(docObj != null){
				File fileObj = fileManager.loadFileById(docObj.getFileId());
				return fileObj;
			}
			return null;
		}
		
	}


