package com.pcs.perpetualRents.manager.impl;

import java.util.List;

import javax.swing.SwingUtilities;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.thymeleaf.spring3.SpringTemplateEngine;

import com.pcs.perpetualRents.business.bean.Address;
import com.pcs.perpetualRents.business.bean.Admin;
import com.pcs.perpetualRents.business.bean.AssignModel;
import com.pcs.perpetualRents.business.bean.Authorities;
import com.pcs.perpetualRents.business.bean.City;
import com.pcs.perpetualRents.business.bean.Documents;
import com.pcs.perpetualRents.business.bean.LandLord;
import com.pcs.perpetualRents.business.bean.PerpetualCounty;
import com.pcs.perpetualRents.business.bean.PropertyDocumentDownloadStatus;
import com.pcs.perpetualRents.business.bean.UserLogin;
import com.pcs.perpetualRents.common.bean.ApplicationSettings;
import com.pcs.perpetualRents.common.bean.DevelopmentSettings;
import com.pcs.perpetualRents.dao.AddressDAO;
import com.pcs.perpetualRents.dao.AssignDAO;
import com.pcs.perpetualRents.dao.CityDAO;
import com.pcs.perpetualRents.dao.CountyDAO;
import com.pcs.perpetualRents.dao.DocumentsDAO;
import com.pcs.perpetualRents.dao.IdentityGeneratorDAO;
import com.pcs.perpetualRents.dao.LandLordDAO;
import com.pcs.perpetualRents.dao.PropertyDocumentDownloadStatusDAO;
import com.pcs.perpetualRents.dao.UserAdminDAO;
import com.pcs.perpetualRents.dao.UserLoginDAO;
import com.pcs.perpetualRents.enm.IdentityGeneratorObjective;
import com.pcs.perpetualRents.enm.MailEventType;
import com.pcs.perpetualRents.enm.ObjectType;
import com.pcs.perpetualRents.enm.UserType;
import com.pcs.perpetualRents.manager.CommonManager;
import com.pcs.perpetualRents.manager.LandLordManager;
import com.pcs.perpetualRents.manager.MailEventManager;
import com.pcs.perpetualRents.manager.UserAdminManager;
import com.pcs.perpetualRents.util.mail.LandlordMailUtility;

@Service
@Transactional
public class LandLordManagerImpl implements LandLordManager{
	
	@Autowired
	private LandLordDAO landLordDAO;
	@Autowired
	private AddressDAO addressDAO;
	@Autowired
	private AssignDAO assignDAO;
	@Autowired
	private UserLoginDAO userLoginDAO;
	@Autowired
	private DevelopmentSettings developmentSettings;
	@Autowired
	private IdentityGeneratorDAO gereratorDAO;
	@Autowired
	private CityDAO cityDAO;
	@Autowired
	private ApplicationSettings applicationSettings;
	@Autowired
	private JavaMailSender mailSender;
	@Autowired
	private SpringTemplateEngine templateEngine;
	/*@Autowired
	private FileDAO fileDAO;
	@Autowired
	private PropertyManager propertyManager;*/
	@Autowired
	private MailEventManager eventManager;
	@Autowired
	private UserAdminDAO userAdminDAO;
	@Autowired
	private CommonManager commonManager;
	@Autowired
	private DocumentsDAO documentsDAO;
	@Autowired
	private CountyDAO countyDAO;
	@Autowired
	private PropertyDocumentDownloadStatusDAO propertyDocumentDownloadStatusDAO;
	@Autowired
	private UserAdminManager userAdminManager;
	
	
	@Override
	public boolean createLandLord(final LandLord obj, final Long userId) {
		try{
				if(obj == null){
					System.out.println("Object is Null");
					return false;
				}
				Address addressObj = obj.getAddressObj();
				UserLogin loginObj = obj.getLoginObj();
				
				if(addressObj == null){
					obj.setErrorMessage("Address Detail is not complete");
					return false;
				}
				if(loginObj == null){
					obj.setErrorMessage("Login Detail is not complete");
					return false;
				}
				
				loginObj.setUserTypeId(UserType.LANDLORD.id());
				Long userLoginId = userLoginDAO.createLoginUser(loginObj, userId);
								   userLoginDAO.createAuthority(new Authorities(loginObj.getUsername(), "ALL"));
				if(userLoginId == null){
					obj.setErrorMessage((loginObj.getErrorMessage() == null ? "" : loginObj.getErrorMessage()));
					return false;
				}
				obj.setUserLoginId(userLoginId);
				obj.setUniqueReference(gereratorDAO.getUniqueReference(IdentityGeneratorObjective.LANDLORD_IDENTITY.value()));
				
				Long landlordId = landLordDAO.createLandLord(obj, userId);
				if(landlordId == null){
					obj.setErrorMessage("Land lord not created.");
					return false;
				}
				
				addressObj.setCountryId(1l);
				addressObj.setObjectType(ObjectType.LANDLORD.id());
				addressObj.setObjectId(landlordId);
				
				String _cityIdStr = addressObj.getCity();
				if(_cityIdStr != null){
					City tCityObj = cityDAO.loadCityById(Long.valueOf(_cityIdStr));
					if(tCityObj != null){
						addressObj.setCity(tCityObj.getCity());
						Long addressId = addressDAO.createAddress(addressObj, userId);
						if(addressId != null){
							LandLord tLandlordObj = loadLandlordById(landlordId);
							SwingUtilities.invokeLater(new  LandlordMailUtility(tLandlordObj, userAdminManager,  applicationSettings, mailSender, MailEventType.REGISTER, eventManager, templateEngine, commonManager, loginObj));
							return true;
						}
				}
				
			}	
				return true;
		}catch (DuplicateKeyException e) {
			obj.setErrorMessage("UserName already exist, Please try with different username");
			return false;
		}
	}
	
	@Override
	public Long assignToContractor(AssignModel assignObj, Long userId) {
		try{
			if(assignObj != null){
				List<Address> addresses = addressDAO.loadAddressById(ObjectType.PROPERTY.id(), assignObj.getPropertyId());
				if(addresses != null && !addresses.isEmpty()){
					City cityObj = cityDAO.loadCityByName(addresses.get(0).getCity());
					if(cityObj != null){
						assignObj.setCityId(cityObj.getId());
						Long assignId = assignDAO.assign(assignObj, userId);
						if(assignId != null)
							return assignId;
					}
				}
				
			}
			return null;
		}catch (DuplicateKeyException e) {
			e.printStackTrace();
			assignObj.setErrorMessage("Already assigned.");
			return null;
		}
	}
	
	@Override
	public LandLord loadLandLordByUserLogin(UserLogin userLoginObj){
		try{
			if(userLoginObj == null){
				return null;
			}
			
			LandLord landLordObj = landLordDAO.loadLandLordByLoginId(userLoginObj.getId());
			if(landLordObj != null){
				List<Address> addressList = addressDAO.loadAddressById(ObjectType.LANDLORD.id(), landLordObj.getId());
				if(addressList != null && !addressList.isEmpty()){
					landLordObj.setAddressObj(addressList.get(0));
				}
				return landLordObj;
			}
			return null;
		}catch (Exception e) {
			return null;
		}
	}
	
	@Override
	public boolean updateLandLord(LandLord obj, Long userId) {
		try{
			if(obj == null){
				return false;
			}
			
			Address addressObj = obj.getAddressObj();
			
			if(addressObj == null){
				obj.setErrorMessage("Address is not complete.");
				return false;
			}
			addressObj.setObjectType(ObjectType.LANDLORD.id());
			
			String cityIdStr = addressObj.getCity();
			UserLogin loginObj = userLoginDAO.findLoginUserById(userId);
			if(cityIdStr != null && loginObj != null){
				City cityObj = cityDAO.loadCityById(Long.valueOf(cityIdStr));
				if(cityObj != null){
					addressObj.setObjectId(obj.getId());
					addressObj.setCity(cityObj.getCity());
					addressDAO.updateAddress(addressObj,userId);
					landLordDAO.updateLandLord(obj);
					obj = loadLandlordById(obj.getId());
					Thread thread = new Thread(new  LandlordMailUtility(obj, userAdminManager, applicationSettings, mailSender, MailEventType.PROFILE_EDIT, eventManager, templateEngine, commonManager, loginObj));
					thread.start();
					thread.setContextClassLoader(getClass().getClassLoader());
				}
			}
			
			return true;
			
		}catch (Exception e) {
			e.printStackTrace();
			obj.setErrorMessage(e.getMessage());
			return false;
		}
	}
	
	@Override
	public List<LandLord> loadAllLandLord(Integer start, Integer limit, UserLogin loginObj) {
		List<LandLord> landLordList = null;
		if(loginObj.getUserTypeId() == UserType.SUPER_ADMIN.id()){
			landLordList = landLordDAO.loadAllLandLord(start, limit, null);
		}else if(loginObj.getUserTypeId() == UserType.ADMIN.id()){
			Admin adminObj = userAdminDAO.loadAdminByLoginObj(loginObj);
			if(adminObj != null){
				landLordList = commonManager.loadLandlordByAdmin(adminObj);
			}
		}
		
		if(landLordList!=null && !landLordList.isEmpty()){
			for(LandLord landLord : landLordList){
				List<Address> addressList = addressDAO.loadAddressById(ObjectType.LANDLORD.id(), landLord.getId());
				if(addressList!=null){
					landLord.setAddressObj(addressList.get(0));
				}
			}
			return landLordList;
		}
		return null;
	}
	
	@Override
	public boolean deleteLandLord(Long landlordId, Long objectType) {
		boolean status = false;
		Long objId = landlordId;
		if(objId != null){
			status = addressDAO.deleteAddress(objectType, objId);
			System.out.println("Address Deleted " + status);
		if(status){
			LandLord landLordObj = landLordDAO.loadLandLordById(objId);
			UserLogin loginObj = landLordObj.getLoginObj();
			System.out.println("Login Object " + loginObj);
			if(loginObj != null){
			status = status && userLoginDAO.deleteLoginUser(loginObj.getId());
			System.out.println("Login Deleted " + status);
			if(status){
				status = landLordDAO.deleteLandLord(objId);
				System.out.println("Landlord Deleted " + status);
			}
			}
		}
		}
		return status;
	}
	

	@Override
	public List<City> loadCities() {
		List<City> cityList = cityDAO.loadCityByObjectType(ObjectType.SUPER_PMC.id());
		if(cityList != null && !cityList.isEmpty())
			return cityList;
		return null;
		}
	
	@Override
	public List<City> loadCityByObjectType(Long objectType, String searchTerm) {
		List<City> cityList = cityDAO.loadCityByObjectType(objectType);
		if(cityList != null && !cityList.isEmpty())
			return cityList;
		
		return null;
	}
	
	@Override
	public List<AssignModel> loadAssignedJobsByPropertyId(final Long landlordId, final Long propertyId){
		return assignDAO.loadAssignedByObjectAndProperty(ObjectType.LANDLORD.id(), landlordId, propertyId);
	}

	@Override
	public boolean updateDocumentStatus(final Documents documents, final Long userId){
		return documentsDAO.updateStatus(documents, userId);
	}
	
	@Override
	public LandLord loadLandlordById(Long id) {
		LandLord landLordObj = landLordDAO.loadLandLordById(id);
		if(landLordObj != null){
			List<Address> addressList = addressDAO.loadAddressById(ObjectType.LANDLORD.id(), landLordObj.getId());
			if(addressList != null && !addressList.isEmpty()){
				landLordObj.setAddressObj(addressList.get(0));
			}
			return landLordObj;
		}
		return null;
	}
	
	@Override
	public List<Documents> loadDocumentsByJob(final AssignModel assignModelObj){
		return documentsDAO.loadDocumentsByContractorFunctionalityAndPropertyId(assignModelObj.getAssignToId(), assignModelObj.getFunctionalityId(), assignModelObj.getPropertyId());
	}
	
	public List<PerpetualCounty> loadAllPerpetualCounty(){
		return countyDAO.loadAllPerpetualCounty();
	}
	
	public Long createPropertyDocumentDownloadStatus(PropertyDocumentDownloadStatus statusObj, final Long createdUserId){
		return propertyDocumentDownloadStatusDAO.createPropertyDocumentDownloadStatus(statusObj, createdUserId);
	}
	
	public PropertyDocumentDownloadStatus loadDocumentStatusById(Long id){
		return propertyDocumentDownloadStatusDAO.loadDocumentStatusById(id);
	}
	
	public PropertyDocumentDownloadStatus loadDocumentStatusByLandlordId(Long landlordId){
		return propertyDocumentDownloadStatusDAO.loadDocumentStatusByObjectType(ObjectType.LANDLORD.id(), landlordId);
	}
	
	public boolean updateDocStatus(String tableName, String[] fields, String[] values, String[] whereCondition, String[] whereValues){
		return propertyDocumentDownloadStatusDAO.updateDocStatus(tableName, fields, values, whereCondition, whereValues);
	}
	
	public DevelopmentSettings getDevelopmentSettings() {
		return developmentSettings;
	}

	public void setDevelopmentSettings(DevelopmentSettings developmentSettings) {
		this.developmentSettings = developmentSettings;
	}
	public ApplicationSettings getApplicationSettings() {
		return applicationSettings;
	}

	public void setApplicationSettings(ApplicationSettings applicationSettings) {
		this.applicationSettings = applicationSettings;
	}

	public JavaMailSender getMailSender() {
		return mailSender;
	}

	public void setMailSender(JavaMailSender mailSender) {
		this.mailSender = mailSender;
	}

	public SpringTemplateEngine getTemplateEngine() {
		return templateEngine;
	}

	public void setTemplateEngine(SpringTemplateEngine templateEngine) {
		this.templateEngine = templateEngine;
	}

}
