package com.pcs.perpetualRents.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.mysql.jdbc.Statement;
import com.pcs.perpetualRents.business.bean.Contractor;
import com.pcs.perpetualRents.business.bean.PropertyDocumentDownloadStatus;
import com.pcs.perpetualRents.business.bean.UserLogin;
import com.pcs.perpetualRents.common.bean.ApplicationSettings;
import com.pcs.perpetualRents.common.bean.DevelopmentSettings;
import com.pcs.perpetualRents.dao.PropertyDocumentDownloadStatusDAO;
import com.pcs.perpetualRents.dao.mapper.PropertyDocumentDownloadStatusMapper;

@Repository
public class PropertyDocumentDownloadStatusDAOImpl implements PropertyDocumentDownloadStatusDAO {
	
	private static Logger logger = ApplicationSettings.getLogger(PropertyDocumentDownloadStatusDAOImpl.class.getName()); 
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	@Autowired
	private DevelopmentSettings developmentSettings;

	@Override
	public Long createPropertyDocumentDownloadStatus(final PropertyDocumentDownloadStatus statusObj, final Long createdUserId) {
		final String sql = "INSERT INTO " + PropertyDocumentDownloadStatus.TABLE_NAME
							+ " ( " + PropertyDocumentDownloadStatus.IS_FIRSTFILE_DOWNLOADED + ", " + PropertyDocumentDownloadStatus.IS_SECONDFILE_DOWNLOADED
							+ ", " + PropertyDocumentDownloadStatus.IS_THIRDFILE_REGISTERATION_DOWNLOADED
							+ ", " + PropertyDocumentDownloadStatus.OBJECT_TYPE_ID
							+ ", " + PropertyDocumentDownloadStatus.OBJECT_ID
							+ ", " + PropertyDocumentDownloadStatus.CREATED_USER_ID
							+ " ) "
							+ " VALUES (?, ?, ?, ?, ?, ? )";

		KeyHolder keyHolder = new GeneratedKeyHolder();
		
		if(developmentSettings.isShowSQL())
			logger.info(sql);
	
	jdbcTemplate.update(new PreparedStatementCreator() {
		
		@Override
		public PreparedStatement createPreparedStatement(Connection connection)throws SQLException {
				PreparedStatement psObj = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
				psObj.setBoolean(1, statusObj.isFirstFileDownloaded());
				psObj.setBoolean(2, statusObj.isSecondFileDownloaded());
				psObj.setBoolean(3, statusObj.isThirdFileDownloaded());
				psObj.setLong(4, statusObj.getObjectTypeId());
				psObj.setLong(5, statusObj.getObjectId());
				psObj.setLong(6, createdUserId);
			return psObj;
		}
	}, keyHolder);
	
	
	return keyHolder.getKey().longValue();
}

	@Override
	public PropertyDocumentDownloadStatus loadDocumentStatusById(Long id) {
		
		String sql = "SELECT ua." + PropertyDocumentDownloadStatus.ID + ", ua." + PropertyDocumentDownloadStatus.IS_FIRSTFILE_DOWNLOADED + ", ua." + PropertyDocumentDownloadStatus.IS_SECONDFILE_DOWNLOADED
				+ ", ua." + PropertyDocumentDownloadStatus.IS_THIRDFILE_REGISTERATION_DOWNLOADED + ", ua." + PropertyDocumentDownloadStatus.OBJECT_TYPE_ID
				+ ", ua." + PropertyDocumentDownloadStatus.OBJECT_ID
				+ ", ua." + PropertyDocumentDownloadStatus.PROPERTY_ID
				+ ", ua." + PropertyDocumentDownloadStatus.CREATED_ON + ", ua." + PropertyDocumentDownloadStatus.MODIFIED_ON
				+ ", x1." + UserLogin.USERNAME 
				+ ", x2." + UserLogin.USERNAME + " AS " + Contractor.CREATED_BY
				+ ", x3." + UserLogin.USERNAME + " AS " + Contractor.MODIFIED_BY 
				+ " FROM " + PropertyDocumentDownloadStatus.TABLE_NAME + " ua " 
				+ " LEFT JOIN " + UserLogin.TABLE_NAME  + " x1 ON ua." + Contractor.USER_LOGIN_ID + " = " + " x1." + UserLogin.ID
				+ " LEFT JOIN " + UserLogin.TABLE_NAME  + " x2 ON ua." + Contractor.CREATED_USER_ID + " = " + " x2." + UserLogin.ID
				+ " LEFT JOIN " + UserLogin.TABLE_NAME  + " x3 ON ua." + Contractor.MODIFIED_USER_ID + " = " + " x3." + UserLogin.ID
				+ " WHERE ua." + PropertyDocumentDownloadStatus.ID  + " = " + id;
					
		if(developmentSettings.isShowSQL())
			logger.info(sql);
		
	 List<PropertyDocumentDownloadStatus> contractorList = jdbcTemplate.query(sql, new PropertyDocumentDownloadStatusMapper());
		 if(contractorList != null && !contractorList.isEmpty())
			 return contractorList.get(0);
			
		return null;
	}
	
	@Override
	public PropertyDocumentDownloadStatus loadDocumentStatusByObjectType(Long objectTypeId, Long objectId) {
		
		String sql = "SELECT ua." + PropertyDocumentDownloadStatus.ID + ", ua." + PropertyDocumentDownloadStatus.IS_FIRSTFILE_DOWNLOADED + ", ua." + PropertyDocumentDownloadStatus.IS_SECONDFILE_DOWNLOADED
				+ ", ua." + PropertyDocumentDownloadStatus.IS_THIRDFILE_REGISTERATION_DOWNLOADED + ", ua." + PropertyDocumentDownloadStatus.OBJECT_TYPE_ID
				+ ", ua." + PropertyDocumentDownloadStatus.OBJECT_ID
				+ ", ua." + PropertyDocumentDownloadStatus.PROPERTY_ID
				+ ", ua." + PropertyDocumentDownloadStatus.CREATED_ON + ", ua." + PropertyDocumentDownloadStatus.MODIFIED_ON
				+ ", x2." + UserLogin.USERNAME + " AS " + Contractor.CREATED_BY
				+ ", x3." + UserLogin.USERNAME + " AS " + Contractor.MODIFIED_BY 
				+ " FROM " + PropertyDocumentDownloadStatus.TABLE_NAME + " ua " 
				+ " LEFT JOIN " + UserLogin.TABLE_NAME  + " x2 ON ua." + PropertyDocumentDownloadStatus.CREATED_USER_ID + " = " + " x2." + UserLogin.ID
				+ " LEFT JOIN " + UserLogin.TABLE_NAME  + " x3 ON ua." + PropertyDocumentDownloadStatus.MODIFIED_USER_ID + " = " + " x3." + UserLogin.ID
				+ " WHERE ua." + PropertyDocumentDownloadStatus.OBJECT_TYPE_ID  + " = " + objectTypeId
				+ " AND ua." + PropertyDocumentDownloadStatus.OBJECT_ID  + " = " + objectId
				+ " AND ua." + PropertyDocumentDownloadStatus.PROPERTY_ID + " IS NULL";
					
		System.out.println(sql);
		if(developmentSettings.isShowSQL())
			logger.info(sql);
		
	 List<PropertyDocumentDownloadStatus> contractorList = jdbcTemplate.query(sql, new PropertyDocumentDownloadStatusMapper());
		 if(contractorList != null && !contractorList.isEmpty())
			 return contractorList.get(0);
			
		return null;
	}

	@Override
	public boolean updateDocStatus(String tableName, String[] fields, String[] values, String[] whereCondition, String[] whereValues) {
		String sql = "UPDATE " + tableName + " SET ";
		int counter = 0;
		String delim = "";
		   for (String value : values) {
			sql +=  delim + fields[counter++].trim() + " = " + value.trim() + ""; 
			delim = ", ";
		   } 
		   if(whereCondition != null){
			   int wCounter = 0;
			   sql += " WHERE ";
			   String wDelim = "";
			   for (String value : whereValues) {
				   sql += wDelim  + whereCondition[wCounter++].trim() + " = '" + value.trim() + "'";
				   wDelim = " AND ";
			   	}
		   }
		   
		   if(developmentSettings.isShowSQL())
			   logger.info(sql);
		   
		   jdbcTemplate.update(sql);
		   
		   return true;
		   
	}
	
}
